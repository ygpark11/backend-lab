# 이 파일에서 사용할 'redis-net'이라는 이름의 사용자 정의 네트워크를 생성합니다.
# 모든 컨테이너를 이 네트워크에 포함시켜, 서로 안정적으로 통신하도록 보장합니다.
networks:
  redis-net:

# 이 파일로 관리할 서비스(컨테이너)들의 목록을 정의합니다.
services:
  # 1. Master Redis 서버 서비스 정의
  redis-master:
    # 도커 허브의 redis:alpine 이미지를 사용합니다.
    image: redis:alpine
    # 내 PC의 6379 포트와 컨테이너의 6379 포트를 연결합니다.
    ports:
      - "6379:6379"
    # 이 서비스를 redis-net 네트워크에 포함시킵니다.
    networks:
      - redis-net

  # 2. 첫 번째 Slave Redis 서버 서비스 정의
  redis-slave-1:
    image: redis:alpine
    # 시작 시, redis-master의 Slave로 동작하도록 명령어를 지정합니다.
    command: redis-server --slaveof redis-master 6379
    # Master가 시작된 후에 시작되도록 의존성을 설정합니다.
    depends_on:
      - redis-master
    networks:
      - redis-net

  # 3. 두 번째 Slave Redis 서버 서비스 정의
  redis-slave-2:
    image: redis:alpine
    command: redis-server --slaveof redis-master 6379
    depends_on:
      - redis-master
    networks:
      - redis-net

  # 4. Sentinel 감시자 서비스 정의
  sentinel-1:
    image: redis:alpine
    ports:
      - "26379:26379"
    # volumes를 통해 로컬 PC의 설정 파일 및 스크립트와 컨테이너 내부를 연결합니다.
    volumes:
      - ./sentinel.conf:/etc/redis/sentinel.conf
      - ./entrypoint.sh:/entrypoint.sh
    # 컨테이너 시작 시, 기본 명령어 대신 우리가 만든 entrypoint.sh 스크립트를 실행합니다.
    entrypoint: /entrypoint.sh
    # Master가 시작된 후에 시작되도록 의존성을 설정합니다.
    depends_on:
      - redis-master
    # 어떤 이유로든 컨테이너가 종료되면, Docker가 자동으로 재시작시켜 줍니다.
    restart: always
    networks:
      - redis-net